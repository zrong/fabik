---
description: 项目架构和依赖
alwaysApply: true
---
- 永远使用 Python 3.13，请遵循最新的语言标准。
- 永远使用 uv 安装和管理依赖

# 项目结构指南

这是一个名为 `fabik` 的 Python 命令行项目：

- 主入口文件是 `fabik/__main__.py` ，其中使用代码定义入口点。
- 项目配置在 `pyproject.toml` 中定义
- 项目的主配置文件为 `fabik.toml`。
- 项目的虚拟环境在 `.venv/` 文件夹中。
- 项目范例配置文件在 `samples/` 文件夹中。

# fabik 命令行调用

- 激活 `.venv/` 虚拟环境后，可以使用 `python fabik` 或者 `python -m fabik` 调用命令行。
- 命令行基于 `typer` 库开发。
- 命令行有多个子命令，可以通过 `python -m fabik --help` 查看。


# 项目支持工具

- 使用 `uv` 代替 `pip` 作为包管理工具。
- 使用 `uv` 作为包发布工具。
- 使用 `uv run fabik` 来运行项目的命令行。
- 使用 `pytest` 作为测试工具。
- 在使用 `pytest` 执行测试时，使用 `samples/fabik.toml` 作为主配置文件。

# 项目依赖管理

- 不要创建 `requirements.txt`。
- 对于项目正常使用过程中的依赖项，总是使用 `uv add` 来添加。
- 对于只在开发过程中使用的依赖项，例如测试工具、文档工具，总是使用 `uv add --dev` 来添加。

# git 提交信息规范

- **除非明确告知需要提交，否则不要自动提交仓库。**
- 当被明确告知 需要提交到 git 仓库时，请基于项目修改，提供详细的 commit message。
