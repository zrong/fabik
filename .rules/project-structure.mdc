---
description: 项目架构和依赖
alwaysApply: true
---
- 永远使用 Python 3.13，请遵循最新的语言标准。
- 永远使用 uv 安装和管理依赖

# 项目结构指南

这是一个名为 `fabik` 的 Python 命令行项目：

- 主入口文件是 `fabik/__main__.py` ，其中使用代码定义入口点。
- 项目配置在 `pyproject.toml` 中定义
- 项目的主配置文件为 `fabik.toml`。
- 项目的虚拟环境在 `.venv/` 文件夹中。
- 项目范例配置文件在 `samples/` 文件夹中。

## 项目概述

Fabik 是一个用于 Python 命令行项目的基础设施包，旨在封装命令行项目中常见的功能，提升开发效率和配置管理能力。项目名称来源于 Fabric 和 Click 的组合，体现了其在远程部署和命令行接口方面的核心能力。

### 目标用户
- 需要构建命令行工具的 Python 开发者
- 需要进行远程部署和配置管理的项目团队
- 需要多环境配置支持的开发项目

### 核心问题
解决命令行项目中的配置管理、多环境支持、远程部署等通用问题，减少重复开发工作。

## 技术栈架构

### 核心技术栈
- **Python**: 3.13+（项目最新要求）
- **CLI框架**: Typer-slim 0.16.0（基于 Click 8.2.1）
- **配置管理**: TOML（tomli-w 1.2.0）
- **模板引擎**: Jinja2 3.1.6
- **远程部署**: Fabric 3.2.2
- **加密支持**: cryptography 45.0.5
- **HTTP客户端**: httpx 0.28.1
- **测试框架**: pytest 8.4.1
- **构建工具**: flit 3.12.0

### 依赖管理方式
- 使用 `uv` 作为包管理工具（而非 pip）
- 开发依赖与生产依赖分离
- 支持文档构建依赖组

## 代码组织架构

### 包结构设计原则

Fabik 项目遵循了清晰的包结构设计原则：

1. **分层架构**: 从用户接口到业务逻辑再到基础工具，层次分明
2. **单一职责**: 每个模块专注于特定的功能领域
3. **依赖倒置**: 高层模块不依赖低层模块，都依赖于抽象
4. **开闭原则**: 对扩展开放，对修改封闭

### 目录映射与职责

```
fabik/
├── __main__.py          # 程序入口点 - 支持 python -m fabik 调用
├── cli.py              # CLI接口层 - 命令注册和路由
├── conf.py             # 配置管理层 - 配置解析和处理
├── error.py            # 异常处理层 - 统一错误定义
├── http.py             # 网络通信层 - HTTP客户端工具
├── log.py              # 日志记录层 - 结构化日志
├── tpl.py              # 模板定义层 - 内置模板
├── cmd/                # 命令实现层
│   ├── __init__.py     # 全局状态和类型定义
│   ├── main.py         # 主命令实现
│   ├── conf.py         # 配置命令实现
│   ├── gen.py          # 生成命令实现
│   ├── server.py       # 服务器命令实现
│   └── venv.py         # 虚拟环境命令实现
├── deploy/             # 部署抽象层
│   ├── __init__.py     # 部署基类和通用功能
│   ├── gunicorn.py     # Gunicorn部署策略
│   ├── uwsgi.py        # uWSGI部署策略
│   └── tmux.py         # Tmux部署策略
└── util/               # 工具支持层
    ├── __init__.py     # 工具模块初始化
    ├── date.py         # 日期时间工具
    ├── encrypt.py      # 加密解密工具
    ├── func.py         # 通用函数库
    ├── gen.py          # 生成工具核心
    └── jinja_filter.py # Jinja2过滤器
```

## 设计模式应用

### 1. 命令模式 (Command Pattern)

**应用位置**: CLI 子命令系统

**实现方式**:
```python
# fabik/cli.py
main: typer.Typer = typer.Typer()

sub_gen = typer.Typer(name='gen', help='Generate common strings.')
sub_conf = typer.Typer(name='conf', help='Process configuration files.')
sub_server = typer.Typer(name='server', help='Process remote server.')

# 命令注册
sub_gen.command('password')(gen_password)
sub_conf.command('make')(conf_make)
sub_server.command('deploy')(server_deploy)
```

**优势**:
- 解耦命令的调用者和执行者
- 便于添加新命令
- 支持命令的撤销和重做（虽然当前未实现）

## 2. 策略模式 (Strategy Pattern)

**应用位置**: 部署系统

**实现方式**:
```python
# fabik/deploy/__init__.py
class Deploy:
    """部署策略的抽象基类"""
    
    def deploy(self):
        """部署方法 - 由子类实现具体策略"""
        raise NotImplementedError

# fabik/deploy/gunicorn.py
class GunicornDeploy(Deploy):
    """Gunicorn部署策略"""
    
    def deploy(self):
        # Gunicorn特定的部署逻辑
        pass

# fabik/deploy/uwsgi.py  
class UwsgiDeploy(Deploy):
    """uWSGI部署策略"""
    
    def deploy(self):
        # uWSGI特定的部署逻辑
        pass
```

**优势**:
- 支持多种部署方式
- 易于扩展新的部署策略
- 运行时切换部署方式

### 3. 单例模式 (Singleton Pattern)

**应用位置**: 全局状态管理

**实现方式**:
```python
# fabik/cmd/__init__.py
class GlobalState:
    """全局状态管理器"""
    cwd: Path
    conf_file: Path
    env: str | None = None
    force: bool = False
    # ... 其他状态属性

# 全局单例实例
global_state = GlobalState()
```

**优势**:
- 确保全局状态的一致性
- 避免状态分散导致的不一致问题
- 便于状态的集中管理

### 4. 模板方法模式 (Template Method Pattern)

**应用位置**: 配置文件写入

**实现方式**:
```python
# fabik/conf.py
class ConfigWriter:
    """配置写入器基类"""
    
    def write_file(self, force=True, rename=False):
        """模板方法 - 定义写入流程"""
        if not self.dst_file.exists():
            self._write_file_by_type()
        elif force:
            if rename:
                self._backup_file()
            self._write_file_by_type()
        else:
            self._handle_existing_file()
    
    def _write_file_by_type(self):
        """抽象方法 - 由子类实现具体写入逻辑"""
        raise NotImplementedError

class TplWriter(ConfigWriter):
    """基于模板的配置写入器"""
    
    def _write_file_by_type(self):
        """实现模板渲柔写入"""
        tpl = self.tpl_env.get_template(self.tpl_filename)
        self.dst_file.write_text(tpl.render(self.replace_obj))
```

**优势**:
- 定义算法骨架，延迟具体实现
- 避免代码重复
- 便于扩展新的写入方式

### 5. 装饰器模式 (Decorator Pattern)

**应用位置**: 配置验证系统

**实现方式**:
```python
# fabik/cmd/__init__.py
class GlobalState:
    _config_validators: list[Callable] = []
    
    def register_config_validator(self, validator_func: Callable) -> None:
        """注册配置验证器"""
        if callable(validator_func) and validator_func not in self._config_validators:
            self._config_validators.append(validator_func)
    
    def _check_conf_data(self) -> bool:
        """执行所有验证器"""
        for validator in self._config_validators:
            if not validator(self.fabik_config):
                return False
        return True

# 注册默认验证器
global_state.register_config_validator(config_validator_name_workdir)
```

**优势**:
- 支持可插拔的验证机制
- 解耦验证逻辑和核心逻辑
- 便于扩展新的验证规则

## 6. 装饰器模式 (Decorator Pattern)

**应用位置**: 命令注册和参数处理

**实现方式**:
```python
# fabik/cmd/__init__.py
NoteForce = Annotated[
    bool, typer.Option("--force", "-f", help="Force to overwrite the existing file.")
]
NoteRename = Annotated[bool, typer.Option(help="If the target file exists, rename it.")]

# 使用装饰器
def main_init(
    full_format: Annotated[bool, typer.Option(help="Use full format configuration file.")] = False,
    force: NoteForce = False,
):
    """命令实现"""
    pass
```

**优势**:
- 提供统一的参数注解
- 增强可读性和可维护性
- 便于参数验证和处理

## 7. 工厂模式 (Factory Pattern)

**应用位置**: 部署连接创建

**实现方式**:
```python
# fabik/cmd/__init__.py
class GlobalState:
    def build_deploy_conn(self, deploy_class: type["Deploy"]) -> "Deploy":
        """部署连接工厂方法"""
        # 获取配置
        replacer = ConfigReplacer(self.conf_data, self.cwd, env_name=self.env)
        fabric_conf = replacer.get_tpl_value("FABRIC", merge=True)
        
        # 创建连接
        d = deploy_class(
            self.conf_data,
            self.cwd,
            Connection(**fabric_conf),
            self.env,
            self.verbose,
        )
        return d
```

**优势**:
- 封装对象创建逻辑
- 支持不同类型的部署连接
- 便于测试和扩展

## 架构层次分析

### 1. 表现层 (Presentation Layer)
- **组件**: `fabik/cli.py`, `fabik/__main__.py`
- **职责**: 用户接口、命令解析、参数验证
- **特点**: 基于 Typer 的声明式命令定义

### 2. 应用层 (Application Layer)  
- **组件**: `fabik/cmd/`
- **职责**: 业务流程控制、命令实现、状态管理
- **特点**: 命令模式的具体实现

### 3. 领域层 (Domain Layer)
- **组件**: `fabik/conf.py`, `fabik/deploy/`
- **职责**: 核心业务逻辑、配置管理、部署抽象
- **特点**: 领域模型和业务规则

### 4. 基础设施层 (Infrastructure Layer)
- **组件**: `fabik/util/`, `fabik/error.py`, `fabik/log.py`
- **职责**: 工具函数、错误处理、日志记录
- **特点**: 跨层次的支持服务

# 项目支持工具

- 使用 `uv` 代替 `pip` 作为包管理工具。
- 使用 `uv` 作为包发布工具。
- 使用 `uv run fabik` 来运行项目的命令行。
- 使用 `pytest` 作为测试工具。
- 在使用 `pytest` 执行测试时，使用 `samples/fabik.toml` 作为主配置文件。

# 项目依赖管理

- 不要创建 `requirements.txt`。
- 对于项目正常使用过程中的依赖项，总是使用 `uv add` 来添加。
- 对于只在开发过程中使用的依赖项，例如测试工具、文档工具，总是使用 `uv add --dev` 来添加。

## 依赖管理策略

### 1. 分层依赖
```python
# 高层模块依赖抽象
from fabik.conf import FabikConfig  # 而非具体实现

# 低层模块实现抽象
class FabikConfig:
    def load_root_data(self) -> dict[str, Any]:
        # 具体实现
        pass
```

### 2. 依赖倒置
```python
# 接口定义
class Deploy:
    def deploy(self): 
        raise NotImplementedError

# 高层使用接口
def build_deploy_conn(self, deploy_class: type["Deploy"]):
    return deploy_class(...)  # 依赖抽象而非具体类
```

### 3. 循环依赖避免
- 通过分层设计避免循环依赖
- 使用接口和抽象类解耦
- 延迟导入和类型注解

# 错误处理架构

## 1. 异常层次设计
```python
FabikError                    # 根异常
├── ConfigError              # 配置相关错误
├── PathError                # 路径相关错误  
├── EnvError                 # 环境相关错误
└── TplError                 # 模板相关错误
```

## 2. 错误传播机制
```python
def load_conf_data(self) -> dict[str, Any]:
    try:
        # 核心逻辑
        pass
    except PathError as e:
        echo_error(e.err_msg)
        raise typer.Abort()  # 转换为CLI退出
    except ConfigError as e:
        echo_error(e.err_msg)
        raise typer.Abort()
```

## 3. 用户友好错误
```python
class FabikError(Exception):
    def __init__(self, err_type: Exception, err_msg: str):
        self.err_type = err_type
        self.err_msg = err_msg
        # 保留原始错误信息，提供用户友好消息
```

# 配置管理架构

## 1. 多层配置合并
```python
def merge_dict(x: dict, y: dict, z: dict | None = None) -> dict:
    """递归合并配置字典"""
    # 基础配置 + 环境配置 + 用户配置
```

## 2. 模板化配置
```python
def get_replace_obj(self, tpl_name: str) -> dict:
    """获取替换后的配置对象"""
    # 1. 获取原始配置
    # 2. 应用环境变量
    # 3. Jinja2 模板渲染
    # 4. 返回最终配置
```

## 3. 验证机制
```python
def config_validator_name_workdir(config: FabikConfig) -> bool:
    """配置验证器示例"""
    # 检查必要配置项
    # 验证路径有效性
    # 返回验证结果
```

# 代码质量特征

## 1. 可测试性
```python
# 依赖注入设计
class ConfigReplacer:
    def __init__(self, fabik_conf: dict, work_dir: Path, **kwargs):
        self.fabik_conf = fabik_conf
        self.work_dir = work_dir
        # 支持外部注入配置

# 纯函数设计
def merge_dict(x: dict, y: dict, z: dict | None = None) -> dict:
    """纯函数，便于单元测试"""
    # 不修改输入参数，返回新对象
```

## 2. 可扩展性
```python
# 插件式验证器
global_state.register_config_validator(custom_validator)

# 策略模式支持新部署方式
class CustomDeploy(Deploy):
    def deploy(self):
        # 自定义部署逻辑
        pass
```

## 3. 可维护性
```python
# 清晰的错误层次
class FabikError(Exception): pass
class ConfigError(FabikError): pass
class PathError(FabikError): pass

# 统一的输出接口
def echo_info(message: str, **kwargs): pass
def echo_warning(message: str, **kwargs): pass
def echo_error(message: str, **kwargs): pass
```

## 4. 可读性
```python
# 类型注解和文档字符串
def getcfg(
    self, 
    *args, 
    default_value: Any = None, 
    data: str | dict = FABIK_DATA
) -> Any:
    """递归获取 conf 中的值。
    
    :param args: 需要读取的参数，支持多级调用
    :param default_value: 找不到这个键就提供一个默认值
    :param data: 提供一个 dict，否则使用 cfg_data
    :return: 获取的配置值
    """
```

# 测试架构

## 测试组织
- 按功能模块划分测试文件
- 使用 pytest 框架
- 支持 mock 和 fixture
- 测试文件组织：
  - `tests/test_conf.py` - 配置功能测试
  - `tests/test_gen.py` - 生成工具测试
  - `tests/test_main.py` - 主命令测试
  - `tests/test_server.py` - 服务器功能测试

## 测试配置
- 使用 `samples/fabik.toml` 作为测试配置
- pytest 配置在 `pyproject.toml` 中定义
- 支持测试覆盖率统计

# 构建和发布

## 构建系统
- 使用 flit 作为构建后端
- 动态版本和描述信息
- 支持不同的分类器
- 入口点配置：`fabik = "fabik.cli:main"`

## 依赖管理策略
- 生产依赖和开发依赖分离
- 文档依赖独立管理
- 使用 uv 进行包管理
- 支持依赖锁定文件 `uv.lock`

# 扩展性设计

## 插件机制
- 验证器可插拔注册
- 部署策略可扩展
- 生成工具可扩展

## 配置扩展
- 支持自定义配置段
- 支持环境特定配置
- 支持外部模板文件

## 命令扩展
- 模块化的命令组织
- 统一的命令注册机制
- 支持子命令嵌套

# 安全考虑

## 配置安全
- 敏感信息环境变量化
- 支持加密存储
- 配置文件权限控制

## 部署安全
- SSH 密钥支持
- 严格主机密钥检查
- 安全的文件传输

# 性能优化

## 配置缓存
- 配置数据缓存机制
- 延迟加载策略

## 网络优化
- rsync 增量同步
- 连接复用机制

# 项目特色总结

Fabik 项目展现了一个成熟的 Python 命令行工具的架构设计：

1. **清晰的分层架构**：从 CLI 接口到业务逻辑再到工具支持，层次分明
2. **模块化设计**：功能模块独立，职责明确，便于维护和扩展
3. **丰富的设计模式**：合理运用多种设计模式解决不同问题
4. **完善的配置系统**：支持多环境、模板化、变量替换的配置管理
5. **可扩展性**：插件化的验证器、策略化的部署方式、模块化的命令组织
6. **工程化实践**：完整的测试覆盖、规范的依赖管理、自动化的构建发布

这种架构设计为 Python 命令行项目提供了一个可复用的基础框架，体现了良好的软件工程实践。
```

# git 提交信息规范

- **除非明确告知需要提交，否则不要自动提交仓库。**
- 当被明确告知 需要提交到 git 仓库时，请基于项目修改，提供详细的 commit message。
